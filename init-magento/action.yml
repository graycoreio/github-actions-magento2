name: "Init Magento"
author: "Graycore"
description: " A Github Action that initializes Magento up until (but not including) `composer install`"
inputs:  
  magento_directory:
    required: true
    description: "The folder where Magento will be installed"

  apply_fixes:
    required: false
    default: 'true'
    description: 'Whether or not to automatically apply fixes from the community to common CI problems.'

  composer_cache_key:
    required: false
    default: '__graycore'
    description: A key to version the composer cache. Can be incremented if you need to bust the cache.

runs:
  using: "composite"
  steps:
    - uses: graycoreio/github-actions-magento2/get-magento-version@main
      id: init-magento-get-magento-version
      with:
        working-directory:  ${{ inputs.magento_directory }}

    - run: echo "::set-output name=version::$(php -v | awk 'NR==1{print $2}')"
      shell: bash
      id: init-magento-get-php-version
    
    - run: echo "::set-output name=version::$(composer --version | awk '{print $3}')"
      shell: bash
      name: Compute Composer Version
      id: init-magento-get-composer-version

    - name: Get Composer Cache Directory
      shell: bash
      working-directory:  ${{ inputs.magento_directory }}
      id: init-magento-composer-cache
      run: |
        echo "::set-output name=dir::$(composer config cache-files-dir)"

    - name: "Cache Composer Packages"
      uses: actions/cache@v3
      with:
        key: "composer | v5 | ${{ inputs.composer_cache_key }} | ${{ steps.init-magento-get-composer-version.outputs.version }} | ${{ steps.init-magento-get-magento-version.outputs.version }} | ${{ steps.init-magento-get-php-version.outputs.version }}"
        restore-keys: |
          composer | v5 | ${{ inputs.composer_cache_key }} |
        path: ${{ steps.init-magento-composer-cache.outputs.dir }}

    - run: composer require monolog/monolog:"<2.7.0" --no-update
      shell: bash
      name: Fixup Monolog (https://github.com/magento/magento2/pull/35596)
      working-directory:  ${{ inputs.magento_directory }}
      if: |
        steps.init-magento-get-magento-version.outputs.version == '"2.4.4"' && inputs.apply_fixes == 'true'

    - run: composer require "dotmailer/dotmailer-magento2-extension-package:4.6.0-p2 as 4.6.0" --no-update
      shell: bash
      name: Fixup Dotmailer (https://devdocs.magento.com/guides/v2.4/release-notes/release-notes-2-4-0-commerce.html#dotdigital-1)
      working-directory:  ${{ inputs.magento_directory }}
      if: |
        steps.init-magento-get-magento-version.outputs.version == '"2.4.0"' && inputs.apply_fixes == 'true'

    - run: |
        composer config --no-interaction allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
        composer config --no-interaction allow-plugins.laminas/laminas-dependency-plugin true
        composer config --no-interaction allow-plugins.magento/* true
      name: Fixup Composer Plugins
      shell: bash
      working-directory:  ${{ inputs.magento_directory }}
      if: |
        !startsWith(steps.init-magento-get-composer-version.outputs.version, 1) && inputs.apply_fixes == 'true'

    - run: | 
        composer global require hirak/prestissimo
      name: Install composer plugin for parallel downloads
      shell: bash
      working-directory:  ${{ inputs.magento_directory }}
      if: ${{ startsWith(steps.init-magento-get-composer-version.outputs.version, '1') }}

branding:
  icon: "code"
  color: "green"
